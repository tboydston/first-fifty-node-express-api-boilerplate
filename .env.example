# Set environment
NODE_ENV=development

# Port number
PORT=3000

# Frontend url
FRONTEND_URL = "https://node-boilerplate.test"

# URL of the Mongo DB
MONGODB_URL=mongodb://127.0.0.1:27017/node-boilerplate

# JWT
# JWT secret key
JWT_SECRET=thisisasamplesecret
# Number of minutes after which an access token expires
JWT_ACCESS_EXPIRATION_MINUTES=30
# Number of days after which a refresh token expires
JWT_REFRESH_EXPIRATION_DAYS=30
# Number of minutes after which a reset password token expires
JWT_RESET_PASSWORD_EXPIRATION_MINUTES=10
# Number of minutes after which a verify email token expires
JWT_VERIFY_EMAIL_EXPIRATION_MINUTES=10
# Number of minutes after which a verify multi-factor authentication ( mfa ) token expires
JWT_VERIFY_MFA_EXPIRATION_MINUTES=10

# SMTP configuration options for the email service
# For testing, you can use a fake SMTP service like Ethereal: https://ethereal.email/create
SMTP_HOST=email-server
SMTP_PORT=587
SMTP_USERNAME=email-server-username
SMTP_PASSWORD=email-server-password
EMAIL_FROM=support@yourapp.com

# Forgot Password
# Determines if the forgot password API should tell the user if the submitted email address doesn't exists. This can be a security risk on platforms where email addresses are private because it will tell an attacker if a specific account exists on the platform.
FORGOT_PASSWORD_SEND_INVALID_USER_RESPONSE=false

# MFA
# MFA service name that appears in authenticator app ( Google Authenticator, Authy, or similar )
MFA_SERVICE_NAME=Test MFA Service
# Cipher algorithm used to encrypt/decrypt stored MFA secrets.'
MFA_ENCRYPTION_ALGO=aes-256-cbc
# MFA key length. If you change the MFA_ENCRYPTION_ALGO you many need to adjust this to match the new ciphers key length.
MFA_ENCRYPTION_KEY_LENGTH=32
# Number of iterations the MFA secret is hashed into a key.
MFA_ENCRYPTION_KEY_ITERATIONS=10
# Password used to encrypt/decrypt MFA secrets stored in database.
MFA_ENCRYPTION_SECRET=thisisasampletextkey
# Initialization Vector used encrypt/decrypt MFA secrets stored in database. Size is dependant on chosen cipher algorithm.
MFA_ENCRYPTION_IV=fb1f4b0a7daaada6cae678df32fad0f0

# Captcha
# Global option to enable or disable all captcha response validation.
CAPTCHA_ENABLED=true
# Routes on which captcha is enabled. Should be comma separated in quotations. Example: "/register,/login"
CAPTCHA_ROUTES="/register-captcha-test"
# Captcha service used. Currently supported options: reCaptchaV2, reCaptchaV3, hCaptcha
CAPTCHA_PROVIDER=reCaptchaV2
# Secret issued by captcha provider Note: 6LeIxAcTAAAAAGG-vFI1TnRWxMZNFuojJ4WifJWe is Googles demo key.
CAPTCHA_SECRET=6LeIxAcTAAAAAGG-vFI1TnRWxMZNFuojJ4WifJWe
# Threshold uses when no specific override is defined. Note: Only used by reCaptchaV3 and hCaptcha enterprise. Also note reCaptcha and hCaptcha us inverse scoring methods so make sure to invert the value if you switch providers.
CAPTCHA_DEFAULT_SCORE_THRESHOLD=0.50
# Override score values for specific routes. Object key should be the path returned in req.path usual "/path".
CAPTCHA_PATH_SCORE_THRESHOLD_OVERRIDES= {"/demo":0.9}

# Registration
# Field in addition to username and password required for registration. May include firstName, lastName, company or username. Should be comma separated. Example: "firstName,lastName"
REGISTRATION_REQUIRED_FIELDS=
# Append all usernames with a short UUID so that users don't have to try to find a unique username. For example 'bob' would be 'bob_d8931d1b'.
REGISTRATION_APPEND_UUID_TO_USERNAMES=false

# Login
# Allows login with either username and password or email and password.
LOGIN_ALLOW_USERNAME=false
